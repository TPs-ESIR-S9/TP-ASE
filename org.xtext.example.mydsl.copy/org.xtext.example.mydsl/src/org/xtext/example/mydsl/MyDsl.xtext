// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/roboML" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore



RoboMLProgram returns RoboMLProgram:
	{RoboMLProgram}
	'RoboMLProgram'
	'{'
		('function' '{' function+=Function ( "," function+=Function)* '}' )?
	'}';


Statement returns Statement:
	Deplacement | Rotation | Loop | Assignement | SetValue | Condition;




Entity returns Entity:
	Entity_Impl | FunctionCall | ArithmeticExpression | GetValue | VariableRef;

Function returns Function:
	{Function}
	'Function'
	'{'
		('newAttribute' newAttribute=RMLObject)?
		('returnType' returnType=RMLObject)?
		('instruction' '{' instruction+=Statement ( "," instruction+=Statement)* '}' )?
		('variable' '{' variable+=Variable ( "," variable+=Variable)* '}' )?
	'}';

enum RMLObject returns RMLObject:
				RMLInt = 'RMLInt' | RMLString = 'RMLString' | RMLFloat = 'RMLFloat' | RMLDouble = 'RMLDouble' | RMLBoolean = 'RMLBoolean';

Variable returns Variable:
	{Variable}
	'Variable'
	'{'
		('variableName' variableName=RMLObject)?
		('variableValue' variableValue=RMLObject)?
		('variableref' '{' variableref+=VariableRef ( "," variableref+=VariableRef)* '}' )?
	'}';

Deplacement returns Deplacement:
	'Deplacement'
	'{'
		('movementType' movementType=Direction)?
		'unit' unit=[Unit|EString]
		('deplacementDistance' deplacementDistance=[Entity|EString])?
	'}';

Rotation returns Rotation:
	'Rotation'
	'{'
		'rotationAngle' rotationAngle=[Entity|EString]
		'rotationSens' rotationSens=[Entity|EString]
	'}';

Loop returns Loop:
	{Loop}
	'Loop'
	'{'
		('booleanExpression' booleanExpression=[Entity|EString])?
		('instruction' '{' instruction+=Statement ( "," instruction+=Statement)* '}' )?
		('variable' '{' variable+=Variable ( "," variable+=Variable)* '}' )?
	'}';

Assignement returns Assignement:
	'Assignement'
	'{'
		('assignableVariable' assignableVariable=[Variable|EString])?
		'entity' entity=[Entity|EString]
	'}';

SetValue returns SetValue:
	'SetValue'
	'{'
		'entityToSet' entityToSet=[Entity|EString]
	'}';

Condition returns Condition:
	{Condition}
	'Condition'
	'{'
		('booleanExpression' booleanExpression=[Entity|EString])?
		('statementIf' '{' statementIf+=Statement ( "," statementIf+=Statement)* '}' )?
		('statementElse' '{' statementElse+=Statement ( "," statementElse+=Statement)* '}' )?
		('variable' '{' variable+=Variable ( "," variable+=Variable)* '}' )?
	'}';

Unit returns Unit:
	{Unit}
	'Unit'
	'{'
		('Type' Type=UnitMeasure)?
	'}';

Entity_Impl returns Entity:
	{Entity}
	'Entity'
	'{'
		('entityType' entityType=RMLObject)?
	'}';

enum Direction returns Direction:
				forward = 'forward' | backward = 'backward' | sideLeft = 'sideLeft' | sideRight = 'sideRight';

enum UnitMeasure returns UnitMeasure:
				m = 'm' | dm = 'dm' | cm = 'cm' | mm = 'mm';

FunctionCall returns FunctionCall:
	'FunctionCall'
	'{'
		('entityType' entityType=RMLObject)?
		'function' function=[Function|EString]
	'}';

ArithmeticExpression returns ArithmeticExpression:
	'ArithmeticExpression'
	'{'
		('entityType' entityType=RMLObject)?
		('arithmeticOperator' arithmeticOperator=ArithmeticOperators)?
		'elementA' elementA=[Entity|EString]
		('elementB' elementB=[Entity|EString])?
		('variable' '{' variable+=Variable ( "," variable+=Variable)* '}' )?
	'}';

GetValue returns GetValue:
	{GetValue}
	'GetValue'
	'{'
		('entityType' entityType=RMLObject)?
	'}';

VariableRef returns VariableRef:
	{VariableRef}
	'VariableRef'
	'{'
		('entityType' entityType=RMLObject)?
	'}';

enum ArithmeticOperators returns ArithmeticOperators:
				Plus = 'Plus' | Minus = 'Minus' | Multiplie = 'Multiplie' | Divide = 'Divide' | Modulo = 'Modulo' | Power = 'Power';

EString returns ecore::EString:
	STRING|ID
;