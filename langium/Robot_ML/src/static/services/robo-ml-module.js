import { createDefaultModule, createDefaultSharedModule, inject } from 'langium';
import { RoboMlGeneratedModule, RoboMlGeneratedSharedModule } from './generated/module.js';
import { RoboMlValidator, registerValidationChecks } from './robo-ml-validator.js';
import { RoboMlAcceptWeaver, weaveAcceptMethods } from './accept-weaver.js';
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const RoboMlModule = {
    validation: {
        RoboMlValidator: () => new RoboMlValidator(),
        RoboMlAcceptWeaver: () => new RoboMlAcceptWeaver()
    }
};
/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createRoboMlServices(context) {
    const shared = inject(createDefaultSharedModule(context), RoboMlGeneratedSharedModule);
    const RoboMl = inject(createDefaultModule({ shared }), RoboMlGeneratedModule, RoboMlModule);
    shared.ServiceRegistry.register(RoboMl);
    registerValidationChecks(RoboMl);
    weaveAcceptMethods(RoboMl);
    return { shared, RoboMl };
}
//# sourceMappingURL=robo-ml-module.js.map