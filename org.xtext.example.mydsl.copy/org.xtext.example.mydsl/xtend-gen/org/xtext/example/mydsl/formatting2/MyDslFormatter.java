/**
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import roboML.Function;
import roboML.RoboMLProgram;
import roboML.Statement;
import roboML.Variable;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final RoboMLProgram roboMLProgram, @Extension final IFormattableDocument document) {
    EList<Function> _function = roboMLProgram.getFunction();
    for (final Function function : _function) {
      document.<Function>format(function);
    }
  }

  protected void _format(final Function function, @Extension final IFormattableDocument document) {
    EList<Statement> _instruction = function.getInstruction();
    for (final Statement statement : _instruction) {
      document.<Statement>format(statement);
    }
    EList<Variable> _variable = function.getVariable();
    for (final Variable variable : _variable) {
      document.<Variable>format(variable);
    }
  }

  public void format(final Object function, final IFormattableDocument document) {
    if (function instanceof XtextResource) {
      _format((XtextResource)function, document);
      return;
    } else if (function instanceof Function) {
      _format((Function)function, document);
      return;
    } else if (function instanceof RoboMLProgram) {
      _format((RoboMLProgram)function, document);
      return;
    } else if (function instanceof EObject) {
      _format((EObject)function, document);
      return;
    } else if (function == null) {
      _format((Void)null, document);
      return;
    } else if (function != null) {
      _format(function, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(function, document).toString());
    }
  }
}
